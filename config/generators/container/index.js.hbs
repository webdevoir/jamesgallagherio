{{#if wantFlowTypes}}
/* @flow */
import React, { Component } from 'react';
{{else}}
import React, { Component, PropTypes } from 'react';
{{/if}}
{{#if wantSCSSModules}}
import cssModules from 'react-css-modules';
{{/if}}
import Box from 'grommet/components/Box';
{{#if imports}}
{{{ createImports imports }}}
{{/if}}
{{#if wantActionsAndReducer}}
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as {{ properCase name }}ActionCreators from './actions';
{{/if}}
{{#if wantSCSSModules}}
import styles from './index.module.scss';
{{/if}}
{{#if wantSelectors}}
import { selectIsLoading, selectError } from './selectors';
{{/if}}
{{#if wantFlowTypes}}
import type { {{ properCase name }}Props, {{ properCase name }}State } from './flowTypes';
{{/if}}
{{#if wantStyledComponents}}
import { StyledWrapper } from './styles';
{{/if}}

// eslint-disable-next-line react/prefer-stateless-function
class {{ properCase name }} extends Component {
  {{#if wantFlowTypes}}
  props: {{ properCase name }}Props;
  {{/if}}
  render() {
    return (
      <Box>
        // the web is your canvas and grommet is your paintbrush ðŸ–Œ
      </Box>
    );
  }
}

{{#unless wantFlowTypes}}
{{ properCase name }}.propTypes = {
  // isLoading: PropTypes.bool.isRequired,
};
{{/unless}}

{{#if wantActionsAndReducer}}
{{#if wantSelectors}}
{{#if wantFlowTypes}}
const mapStateToProps = (state: {{ properCase name }}State) => ({
  isLoading: selectIsLoading(state),
  errorLoading: selectError(state),
});
{{else}}
const mapStateToProps = state => ({
  isLoading: selectIsLoading(state),
  errorLoading: selectError(state),
});
{{/if}}
{{else}}
const mapStateToProps = state => ({
  // myProp: state.myProp,
});
{{/if}}

{{#if wantFlowTypes}}
const mapDispatchToProps = (dispatch: any) => ({
  actions: bindActionCreators(
    {{ properCase name }}ActionCreators,
    dispatch,
  ),
});
{{else}}
const mapDispatchToProps = dispatch => ({
  actions: bindActionCreators(
    {{ properCase name }}ActionCreators,
    dispatch,
  ),
});
{{/if}}
{{/if}}

{{#if wantActionsAndReducer}}
{{#if wantSCSSModules}}
const Container = cssModules({{ properCase name }}, styles);
export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(Container);
{{else}}
export default connect(
  mapStateToProps,
  mapDispatchToProps,
)({{ properCase name }});
{{/if}}
{{else}}
{{#if wantSCSSModules}}
export default cssModules({{ properCase name }}, styles);
{{else}}
export default {{ properCase name }};
{{/if}}
{{/if}}
